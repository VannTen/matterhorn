#! /usr/bin/env sh

# This is the sample Linux notifier for V2 notifications.

# The notification payload is a JSON object presented to standard input,
# having the fields version, sender, message and mentioned.

# This script depends upon `jq(1)` to extract fields from the JSON
# notification and upon `notify-send(1)` to invoke the system notifier.

# See docs/notification-scripts.md for further details.

PGM="`basename $0`"
function fail {
	echo $PGM: "$@" >/dev/stderr
	exit 1
}

# Extract the data to be notified. The data is in a JSON payload at stdin.
json=`cat`
version=`echo $json|jq -Mr .version`
[ "$version" = 2 ] || fail 'JSON payload has wrong version'
sender=`echo $json|jq -Mr .sender`
message=`echo $json|jq -M .message`
mentioned=`echo $json|jq -Mr .mentioned`

# Now prepare the notification. The logic is essentially the same as for
# the V1 notifier.

# Configure the notifier.
ns_URGENCY_GENERAL=normal    # none, low, normal or critical
ns_URGENCY_MENTIONED=normal  # none, low, normal or critical
ns_CATEGORY=im.received
ns_HEADER="Matterhorn message from @$sender"
ns_BODY="$message"

case "$mentioned" in
no) ns_URGENCY=$ns_URGENCY_GENERAL" ;;
yes) ns_URGENCY=$ns_URGENCY_MENTIONED ;;
*) fail "mentioned: invalid value: $mentioned"
esac

# Emit the notification.
case "$urgency" in
none) ;;
low|normal|critical)
	notify-send -u $ns_URGENCY -c $ns_CATEGORY -- "$ns_HEADER" "$ns_BODY" ;;
*) fail "urgency not recognized: $urgency"
esac

# Log the JSON notification payload. Comment out the LOG definition to disable.
LOG=~/.matterhorn-notify.log
[ -n "$LOG" ] && {
	echo `date -Iminutes` $json >> $LOG
}
